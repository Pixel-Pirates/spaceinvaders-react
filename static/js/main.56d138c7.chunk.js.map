{"version":3,"sources":["Components/Entinity.js","Components/Fighter.js","Components/Invader.js","Components/Bullet.js","App.js","serviceWorker.js","index.js"],"names":["Entinity","x","y","src","width","height","leftLocation","window","innerWidth","bottomLocation","innerHeight","styling","bottom","left","position","style","Fighter","Invader","Bullet","fighterCollided","fighter","bullet","topLeft","bottomRight","invaderCollided","invader","App","state","movingLeft","movingRight","fighterX","active","invaderBomb","invaders","score","moveCount","currentCount","tick","newY","index","length","alive","setState","shiftNeeed","map","reset","activeShooters","i","j","push","randomInvader","Math","floor","random","newFighterX","spawnEntities","id","yIndex","xIndex","app","this","onkeypress","event","code","onkeyup","setInterval","bind","inv","React","Component","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.56d138c7.chunk.js","sourcesContent":["import React from 'react'\nimport {game} from '../globals'\n\nconst MAX_X = 100\nconst MAX_Y = 100\n\n\nfunction Entinity({x = 0, y = 0, src = null, width = null, height = null})\n{\n     if (x > MAX_X)\n        throw `Entinity - x prop (${x}) must be less than or equal to ${MAX_X}`\n    if (y > MAX_Y)\n        throw `Entinity - y prop (${y}) must be less than or equal to ${MAX_Y}`\n    \n\n    var leftLocation = (window.innerWidth)*(x/MAX_X) - (width/2);\n    var bottomLocation = (window.innerHeight)*(y/MAX_Y);\n    \n    var styling =\n    {\n        bottom   : `${bottomLocation}px`,\n        left     : `${leftLocation}px`,\n        width    : `${width}px`,\n        height   : `${height}px`,\n        position : \"absolute\"\n    }\n\n    return ( \n        <img style={styling} src={src} />\n        )\n}\n\nexport default Entinity\n","import React from 'react'\nimport {game} from '../globals'\nimport Entinity from './Entinity'\n\nconst MAX_X = 100\n\n\nfunction Fighter({x = 0})\n{\n     return (\n         <Entinity x={x} y={0} src={\"./fighter.jpg\"} width={100} height={85}/>\n     )\n}\n\nexport default Fighter\n","import React from 'react'\nimport Entinity from './Entinity'\n\nfunction Invader({x, y})\n{\n    return ( <Entinity x={x} y={y} src={\"./invader.jpg\"} width={50} height={34} /> )\n}\n\nexport default Invader\n","import React from 'react'\nimport Entinity from './Entinity'\n\nfunction Bullet({x, y})\n{\n    return ( <Entinity x={x} y={y} src={\"./shot.jpg\"} width={8} height={16} /> )\n}\n\nexport default Bullet\n","import React from 'react';\nimport './App.css';\nimport Fighter from './Components/Fighter';\nimport {game} from './globals'\nimport Invader from './Components/Invader';\nimport Bullet from './Components/Bullet';\n\n\nconst FIGHTER_SPEED = 0.5\n\nfunction fighterCollided(fighter, bullet)\n{\n  //fighter 100x85\n  const FIGHTER_WIDTH = 100\n  const FIGHTER_HEIGHT = 85\n\n  var width = (FIGHTER_WIDTH/window.innerWidth)*100\n  var height = (FIGHTER_HEIGHT/window.innerHeight)*100\n  var topLeft = {\n    x : fighter.x - width/2,\n    y : fighter.y + height/2\n  }\n  var bottomRight = {\n    x : fighter.x + width/2,\n    y : fighter.y - height/2\n  }\n\n  if ((topLeft.x < bullet.x && bottomRight.x > bullet.x) && \n      (topLeft.y > bullet.y && bottomRight.y <bullet.y))\n    return true\n\n  return false\n}\n\nfunction invaderCollided(invader, bullet)\n{\n  //invader 50x34\n  const INVADER_WIDTH = 50\n  const INVADER_HEIGHT = 34\n\n  var width = (INVADER_WIDTH/window.innerWidth)*100\n  var height = (INVADER_HEIGHT/window.innerHeight)*100\n  var topLeft = {\n    x : invader.x - width/2,\n    y : invader.y + height/2\n  }\n  var bottomRight = {\n    x : invader.x + width/2,\n    y : invader.y - height/2\n  }\n\n  if ((topLeft.x < bullet.x && bottomRight.x > bullet.x) && \n      (topLeft.y > bullet.y && bottomRight.y <bullet.y))\n    return true\n\n  return false\n}\n\n\nclass App extends React.Component\n{\n  state = {\n    fighter : {\n      movingLeft : false,\n      movingRight : false\n    },\n    fighterX: 50,\n    bullet: {\n      active: false,\n      x : null,\n      y : null\n    },\n    invaderBomb : {\n      active: false,\n      x : null,\n      y : null\n    },\n    invaders: [\n\n    ],\n\n    score : 0,\n\n    moveCount : 60,\n    currentCount : 0\n  }\n\n  componentDidMount()\n  {\n    let app = this\n\n    window.onkeypress = (event) =>\n    {\n      //handle keypress\n      if (event.code == \"KeyA\")\n        this.setState({fighter: {movingLeft: true}})\n        //newFighterX -= FIGHTER_SPEED\n      else if (event.code == \"KeyD\")\n        //newFighterX += FIGHTER_SPEED\n        this.setState({fighter: {movingRight: true}})\n      else if (event.code == \"Space\" && !app.state.bullet.active)\n          app.setState({bullet : {active: true, x : app.state.fighterX, y : 10}})\n    }\n\n    window.onkeyup = (event) =>\n    {\n      //handle keypress\n      if (event.code == \"KeyA\")\n        this.setState({fighter: {movingLeft: false}})\n        //newFighterX -= FIGHTER_SPEED\n      else if (event.code == \"KeyD\")\n        //newFighterX += FIGHTER_SPEED\n        this.setState({fighter: {movingRight: false}})\n    }\n\n    this.spawnEntities()\n\n    setInterval(this.tick.bind(this), 16)\n  }\n\n  tick = () =>\n  {\n    var {bullet, invaders, score, currentCount, moveCount, invaderBomb, fighterX} = this.state\n    \n    //Fighter bullet logic\n    if (bullet.active)\n    {\n      //moving on bullet\n      var active = true\n      var newY = bullet.y\n      newY += 1\n\n      if (newY > 100)\n        active = false\n      \n      //check for collid\n\n      for (var index = 0; index < invaders.length; index++)\n      {\n        if (invaders[index].alive && invaderCollided(invaders[index], bullet))\n        {\n          active = false\n          invaders[index].alive = false  \n          score += 10\n        }\n      }\n\n      this.setState({ \"score\": score, \"bullet\" : { \"y\" : newY, \"x\" : bullet.x, \"active\": active } })\n    }\n    \n    //invader movement logic\n    currentCount++\n    if (currentCount >= moveCount)\n    {\n      currentCount = 0\n      var shiftNeeed = false\n\n      invaders.map((invader) =>\n      {\n        if (invader.alive)\n          invader.x += 1\n        \n        if (invader.x > 90)\n          shiftNeeed = true\n\n        return invader\n      })\n\n      if (shiftNeeed)\n      {\n        invaders.map((invader) =>\n          {\n            invader.x -= 20\n            invader.y -= 5\n            return invader\n          })\n      }\n\n    }\n    this.setState({ \"currentCount\" : currentCount })\n\n    //invader bomb logic\n    if (invaderBomb.active)\n    {\n      //move bomb\n      var active = true\n      var newY = invaderBomb.y\n      newY -= 1\n\n      if (newY < 0)\n        active = false\n      \n      //check for collid with player\n      if (fighterCollided({x: fighterX, y: 0}, invaderBomb))\n      {\n        this.reset()\n      }\n      \n      \n      \n      this.setState({invaderBomb : {\n        active: active,\n        x : invaderBomb.x,\n        y : newY\n      }})\n    }\n    \n    else\n    {\n      //shoot bomb\n\n      var activeShooters = []\n     // console.log(\"-------------START-------------\")\n      for (var i = 1; i <= 6; i++) //1 to 6\n      {\n        for (var j = 3; j >= 1; j--) //3 to 1\n        {\n          var invaderIndex = (6*j) - i\n          var invader = invaders[invaderIndex]\n          //console.log(\"invaderIndex\", invaderIndex)\n          //console.log(\"i\", i)\n          //console.log(\"j\", j)\n\n          if (invader.alive)\n          {\n            //console.log(`${invaderIndex} - (${i}, ${j})`)\n            //console.log(\"invader\", invader)\n            activeShooters.push(invader)\n            break\n          }\n        }\n      }\n      //console.log(\"-------END-------\")\n\n      //console.log(\"activeShooters\", activeShooters)\n\n      var randomInvader = activeShooters[Math.floor(Math.random()*activeShooters.length)]\n      this.setState({invaderBomb : {\n        active: true,\n        x : randomInvader.x,\n        y : randomInvader.y\n      }})\n    }\n\n\n    var newFighterX = this.state.fighterX\n    \n    if (this.state.fighter.movingLeft)\n    {\n      newFighterX -= FIGHTER_SPEED\n    }\n\n    else if (this.state.fighter.movingRight)\n    {\n      newFighterX += FIGHTER_SPEED\n    }\n\n    //correct x value if it's over\n    if (newFighterX < 0)\n    newFighterX = 0\n  else if (newFighterX > 100)\n    newFighterX = 100\n  \n  //set fighterx value if it's changed\n  if (this.state.fighterX != newFighterX)\n    this.setState({fighterX: newFighterX})\n  }\n\n  reset = () =>\n  {\n    this.setState({\"fighterX\" : 50, \"score\": 0, \"bullet\": {\"active\": false}, \"invaderBomb\": {\"active\": false}})\n    this.spawnEntities()\n  }\n\n  spawnEntities = () =>\n  {\n    var invaders = []\n    var id = 0\n\n    for (var yIndex = 0; yIndex < 3; yIndex++)\n    {\n      for (var xIndex = 0; xIndex < 6; xIndex++)\n      {\n        invaders.push({\n          id : id++,\n          x  : xIndex*10 + 10,\n          y  : (9 - yIndex)*10,\n          alive : true\n        })\n      }\n    }\n\n    this.setState({\"invaders\": invaders})\n  }\n\n  render()\n  {\n    const {bullet, fighterX, invaders, score, invaderBomb} = this.state\n    return (\n      <div>\n        <p style={{\"padding-left\": \"50px\"}}>{score}</p>\n        {bullet.active ? <Bullet x={bullet.x} y={bullet.y} /> : null}\n\n        {invaderBomb.active ? <Bullet x={invaderBomb.x} y={invaderBomb.y} /> : null}\n\n        {invaders.map((inv, index) =>\n        {\n          if (inv.alive)\n            return <Invader x={inv.x} y={inv.y} />\n        })}\n        <Fighter x={fighterX} />\n      </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}